[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Benjamin DK Luong",
    "section": "",
    "text": "Benjamin was graduated from University of Missouri with a master degree in Data Science and Analytics in May 2020. He loves to apply Machine Learning, Deep Learning, and Reinforcement Learning in Finance."
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Benjamin DK Luong",
    "section": "Experience",
    "text": "Experience\nDTE Energy | Senior Data Scientist | Sept 2022 - present\nSpectrum Communications | Data Science Analyst | Mar 2020 - Sept 2022"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Benjamin DK Luong",
    "section": "Education",
    "text": "Education\nUniversity of Missouri, Columbia | Columbia, MO | Master Science in Data Science | May 2020\nUniversity of Missouri, Kansas City | Kansas City, MO | B.A in Finance | Dec 2015"
  },
  {
    "objectID": "backup/index copy.html",
    "href": "backup/index copy.html",
    "title": "Benjamin DK Luong",
    "section": "",
    "text": "See report\n    \n\n\n\n\n    \n    \n      See report\n    \n\n\n\n\n    \n    \n      See report"
  },
  {
    "objectID": "backup/index copy.html#data-science",
    "href": "backup/index copy.html#data-science",
    "title": "Benjamin DK Luong",
    "section": "Data Science",
    "text": "Data Science\n\n\n\n\n\nNo matching items\n\n\n See all"
  },
  {
    "objectID": "backup/index copy.html#stock-market",
    "href": "backup/index copy.html#stock-market",
    "title": "Benjamin DK Luong",
    "section": "Stock Market",
    "text": "Stock Market\n\n\n\n\n\nNo matching items\n\n\n See all"
  },
  {
    "objectID": "backup/index copy.html#reinforcement-learning",
    "href": "backup/index copy.html#reinforcement-learning",
    "title": "Benjamin DK Luong",
    "section": "Reinforcement Learning",
    "text": "Reinforcement Learning\n\n\n\n\n\nNo matching items\n\n\n See all"
  },
  {
    "objectID": "data_science/index.html",
    "href": "data_science/index.html",
    "title": "Data Science",
    "section": "",
    "text": "Plotly Tutorial\n\n\n\n\n\n\n\nData Science\n\n\nVisualization\n\n\nPlotly\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2020\n\n\nBenjamin DK Luong\n\n\n\n\n\n\n  \n\n\n\n\nIs Only Accuracy Score Enough?\n\n\n\n\n\n\n\nData Science\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2019\n\n\nBenjamin DK Luong\n\n\n\n\n\n\n  \n\n\n\n\nBasic recipe for machine learning: High bias? High variance?\n\n\n\n\n\n\n\nData Science\n\n\n\n\n\n\n\n\n\n\n\nSep 15, 2019\n\n\nBenjamin DK Luong\n\n\n\n\n\n\n  \n\n\n\n\nHow to split a data set\n\n\n\n\n\n\n\nData Science\n\n\n\n\n\n\n\n\n\n\n\nAug 25, 2019\n\n\nBenjamin DK Luong\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "data_science/posts/00_how_to_split_a_dataset.html",
    "href": "data_science/posts/00_how_to_split_a_dataset.html",
    "title": "How to split a data set",
    "section": "",
    "text": "We should use Stratified split because we usually have unbalanced target classes. We want the model to see all target classes.\n\nStratified K-Fold method divides the data into k blocks, and it makes sure that each set contains approximately the same percentage of samples of each target class as the complete set.\nShuffle Split method randomly selects observations, and it makes sure that each set contains approximately the same percentage of samples of each target class as the complete set."
  },
  {
    "objectID": "data_science/posts/01_high_bias_high_variance.html",
    "href": "data_science/posts/01_high_bias_high_variance.html",
    "title": "Basic recipe for machine learning: High bias? High variance?",
    "section": "",
    "text": "How to check for High Bias, High Variance:\n\nHigh bias (underfit) means the model doesnt get trained enough\nHigh variance (overfit) means the model is overtrained\n\n\n\n\n\n\n\n\n\n\n\n\nCase 1\nCase 2\nCase 3\nCase 4\n\n\n\n\nTrain error\n1%\n15%\n15%\n0.5%\n\n\nTest error\n11%\n16%\n30%\n1%\n\n\n\nHigh variance: The model memorizes the training set. It performs badly on the test set\nHigh bias: The model doesnt lean enough\nHigh variance and High bias: The model doesnt learn enough, and performs badly on the test set\nLow variance and Low bias: This is where we want the model to be\n\n\n\n\n\nTreatments\n\nFirst, we check for high bias (underfit). If YES (high train error), we make bigger network, train more layers, etc, then retrain the model. If NO, we have low train error, we move to the next step.\nNext, we check for high variance (overfit). If YES (high test error), we add more data, dropout, regulations, etc, then retrain the model. If NO, we are done."
  },
  {
    "objectID": "data_science/posts/02_accuracy_score.html",
    "href": "data_science/posts/02_accuracy_score.html",
    "title": "Is Only Accuracy Score Enough?",
    "section": "",
    "text": "When we work with classification problems, we often check for the accuracy score to see how well our models are doing. However, looking only at the accuracy score is not enough.\n\n\n\nMODEL 1\nPredict 0\nPredict 1\n\n\n\n\nActuals 0\n238,541\n847\n\n\nActuals 1\n2,648\n40\n\n\n\n\n\n\nMODEL 2\nPredict 0\nPredict 1\n\n\n\n\nActuals 0\n180,896\n58,492\n\n\nActuals 1\n550\n2,138\n\n\n\nLet’s say we want to detect frauds. The model output equals 1 means it predicts the transaction is a fraud. In our dataset, we have majority transactions are not frauds which are 0. When we train a model, we easily get high accuracy score because we have imbalanced dataset which has more 0 than 1. Comparing the accuracy score between two models, Model 1 has accuracy score : (238541+ 40)/(238541+ 847+ 2648+40) = 0.98556, and Model 2 has accuracy score: (180896+ 2138)/(180896+ 58492 + 550 +2138) = 0.7561. If we choose a model based on the accuracy score, we will choose Model 1 because it has high accuracy score. It’s able to predict 98.556% correctly.\nHowever, we can see that Model 1 is able to predict 40 out 2688 frauds. The recall score is 40/(40+2648)= 0.01488= 1.488% which means the model doesn’t capture frauds, only 1.488% of frauds are predicted. On the other hand, the Model 2 recall score = 2138 / (550 + 2138) = 0.79539 = 79.539%. It means we are able to capture 79.539% of frauds. In the Model 2, we think a lot of normal transactions are frauds, but it’s worth to check them to make sure they are not frauds."
  },
  {
    "objectID": "data_science/posts/03_Plotly_Tutorial.html",
    "href": "data_science/posts/03_Plotly_Tutorial.html",
    "title": "Plotly Tutorial",
    "section": "",
    "text": "Plotly allows you to create over 40 beautiful interactive web-based visualizations that can be displayed in Jupyter notebooks or saved to HTML files. It is widely used to plot scientific, statistical and financial data. Plotly is free to use unless you want them to host your data for you.\n\n\n\nYou can install using Anaconda under the environment tab by searching for Plotly. You’ll also need Cufflinks and a few other packages that you can install by running : conda install -c conda-forge cufflinks-py in your command line or terminal. Also you can use the commands pip install plotly and pip install cufflinks. Cufflinks connects Plotly to Pandas.\n\n\n\n\nimport pandas as pd\nimport numpy as np\n# import chart_studio.plotly as py\n# import cufflinks as cf\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Make Plotly work in your Jupyter Notebook\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n# Use Plotly locally\n# cf.go_offline()\n\n\n\n\n\n# Create a dataframe using a NumPy array that is 50 by 4\narr_1 = np.random.randn(50, 4)\ndf_1 = pd.DataFrame(arr_1, columns=['A','B','C','D'])\ndf_1.head()\n\n# Compare old plots to a Plotly interactive plot\n# You can save as PNG, Zoom, Pan, Turn off & on Data and more\ndf_1.plot()\n\n<AxesSubplot: >\n\n\n\n\n\n\n\n\n\n# Allows us to create graph objects for making more customized plots\nimport plotly.graph_objects as go\n\n# Use included Google price data to make one plot\ndf_stocks = px.data.stocks()\npx.line(df_stocks, x='date', y='GOOG', labels={'x':'Date', 'y':'Price'})\n\n# Make multiple line plots\npx.line(df_stocks, x='date', y=['GOOG','AAPL'], labels={'x':'Date', 'y':'Price'},\n       title='Apple Vs. Google')\n\n# Create a figure to which I'll add plots\nfig = go.Figure()\n# You can pull individual columns of data from the dataset and use markers or not\nfig.add_trace(go.Scatter(x=df_stocks.date, y=df_stocks.AAPL, \n                        mode='lines', name='Apple'))\nfig.add_trace(go.Scatter(x=df_stocks.date, y=df_stocks.AMZN, \n                        mode='lines+markers', name='Amazon'))\n# You can create custom lines (Dashes : dash, dot, dashdot)\nfig.add_trace(go.Scatter(x=df_stocks.date, y=df_stocks.GOOG, \n                        mode='lines+markers', name='Google',\n                        line=dict(color='firebrick', width=2, dash='dashdot')))\n# Further style the figure\n# fig.update_layout(title='Stock Price Data 2018 - 2020',\n#                    xaxis_title='Price', yaxis_title='Date')\n\n# Go crazy styling the figure\nfig.update_layout(\n    # Shows gray line without grid, styling fonts, linewidths and more\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    # Turn off everything on y axis\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=False,\n    ),\n    autosize=False,\n    margin=dict(\n        autoexpand=False,\n        l=100,\n        r=20,\n        t=110,\n    ),\n    showlegend=False,\n    plot_bgcolor='white'\n)\n\n\n                                                \n\n\n\n\n\n\n# Get population change in US by querying for US data\ndf_us = px.data.gapminder().query(\"country == 'United States'\")\npx.bar(df_us, x='year', y='pop')\n\n# Create a stacked bar with more customization\ndf_tips = px.data.tips()\npx.bar(df_tips, x='day', y='tip', color='sex', title='Tips by Sex on Each Day',\n      labels={'tip': 'Tip Amount', 'day': 'Day of the Week'})\n\n# Place bars next to each other\npx.bar(df_tips, x=\"sex\", y=\"total_bill\",\n             color='smoker', barmode='group')\n\n# Display pop data for countries in Europe in 2007 greater than 2000000\ndf_europe = px.data.gapminder().query(\"continent == 'Europe' and year == 2007 and pop > 2.e6\")\nfig = px.bar(df_europe, y='pop', x='country', text='pop', color='country')\n# Put bar total value above bars with 2 values of precision\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n# Set fontsize and uniformtext_mode='hide' says to hide the text if it won't fit\nfig.update_layout(uniformtext_minsize=8)\n# Rotate labels 45 degrees\nfig.update_layout(xaxis_tickangle=-45)\n\n\n                                                \n\n\n\n\n\n\n# Use included Iris data set\ndf_iris = px.data.iris()\n# Create a scatter plot by defining x, y, different color for count of provided\n# column, size based on supplied column and additional data to display on hover\npx.scatter(df_iris, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                 size='petal_length', hover_data=['petal_width'])\n\n# Create a customized scatter with black marker edges with line width 2, opaque\n# and colored based on width. Also show a scale on the right\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=df_iris.sepal_width, y=df_iris.sepal_length,\n    mode='markers',\n    marker_color=df_iris.sepal_width,\n    text=df_iris.species,\n    marker=dict(showscale=True)\n))\nfig.update_traces(marker_line_width=2, marker_size=10)\n\n# Working with a lot of data use Scattergl\nfig = go.Figure(data=go.Scattergl(\n    x = np.random.randn(100000),\n    y = np.random.randn(100000),\n    mode='markers',\n    marker=dict(\n        color=np.random.randn(100000),\n        colorscale='Viridis',\n        line_width=1\n    )\n))\nfig\n\n\n                                                \n\n\n\n\n\n\n# Create Pie chart of the largest nations in Asia\n# Color maps here plotly.com/python/builtin-colorscales/\ndf_samer = px.data.gapminder().query(\"year == 2007\").query(\"continent == 'Asia'\")\npx.pie(df_samer, values='pop', names='country', \n       title='Population of Asian continent', \n       color_discrete_sequence=px.colors.sequential.RdBu)\n\n# Customize pie chart\ncolors = ['blue', 'green', 'black', 'purple', 'red', 'brown']\nfig = go.Figure(data=[go.Pie(labels=['Water','Grass','Normal','Psychic', 'Fire', 'Ground'], \n                       values=[110,90,80,80,70,60])])\n# Define hover info, text size, pull amount for each pie slice, and stroke\nfig.update_traces(hoverinfo='label+percent', textfont_size=20,\n                  textinfo='label+percent', pull=[0.1, 0, 0.2, 0, 0, 0],\n                  marker=dict(colors=colors, line=dict(color='#FFFFFF', width=2)))\n\n\n                                                \n\n\n\n\n\n\n# Plot histogram based on rolling 2 dice\ndice_1 = np.random.randint(1,7,5000)\ndice_2 = np.random.randint(1,7,5000)\ndice_sum = dice_1 + dice_2\n# bins represent the number of bars to make\n# Can define x label, color, title\n# marginal creates another plot (violin, box, rug)\nfig = px.histogram(dice_sum, nbins=11, labels={'value':'Dice Roll'},\n             title='5000 Dice Roll Histogram', marginal='violin',\n            color_discrete_sequence=['green'])\n\nfig.update_layout(\n    xaxis_title_text='Dice Roll',\n    yaxis_title_text='Dice Sum',\n    bargap=0.2, showlegend=False\n)\n\n# Stack histograms based on different column data\ndf_tips = px.data.tips()\npx.histogram(df_tips, x=\"total_bill\", color=\"sex\")\n\n\n                                                \n\n\n\n\n\n\n# A box plot allows you to compare different variables\n# The box shows the quartiles of the data. The bar in the middle is the median \n# The whiskers extend to all the other data aside from the points that are considered\n# to be outliers\ndf_tips = px.data.tips()\n# We can see which sex tips the most, points displays all the data points\npx.box(df_tips, x='sex', y='tip', points='all')\n\n# Display tip sex data by day\npx.box(df_tips, x='day', y='tip', color='sex')\n\n# Adding standard deviation and mean\nfig = go.Figure()\nfig.add_trace(go.Box(x=df_tips.sex, y=df_tips.tip, marker_color='blue',\n                    boxmean='sd'))\n\n# Complex Styling\ndf_stocks = px.data.stocks()\nfig = go.Figure()\n# Show all points, spread them so they don't overlap and change whisker width\nfig.add_trace(go.Box(y=df_stocks.GOOG, boxpoints='all', name='Google',\n                    fillcolor='blue', jitter=0.5, whiskerwidth=0.2))\nfig.add_trace(go.Box(y=df_stocks.AAPL, boxpoints='all', name='Apple',\n                    fillcolor='red', jitter=0.5, whiskerwidth=0.2))\n# Change background / grid colors\nfig.update_layout(title='Google vs. Apple', \n                  yaxis=dict(gridcolor='rgb(255, 255, 255)',\n                 gridwidth=3),\n                 paper_bgcolor='rgb(243, 243, 243)',\n                 plot_bgcolor='rgb(243, 243, 243)')\n\n\n                                                \n\n\n\n\n\n\n# Violin Plot is a combination of the boxplot and KDE\n# While a box plot corresponds to data points, the violin plot uses the KDE estimation\n# of the data points\ndf_tips = px.data.tips()\npx.violin(df_tips, y=\"total_bill\", box=True, points='all')\n\n# Multiple plots\npx.violin(df_tips, y=\"tip\", x=\"smoker\", color=\"sex\", box=True, points=\"all\",\n          hover_data=df_tips.columns)\n\n# Morph left and right sides based on if the customer smokes\nfig = go.Figure()\nfig.add_trace(go.Violin(x=df_tips['day'][ df_tips['smoker'] == 'Yes' ],\n                        y=df_tips['total_bill'][ df_tips['smoker'] == 'Yes' ],\n                        legendgroup='Yes', scalegroup='Yes', name='Yes',\n                        side='negative',\n                        line_color='blue'))\nfig.add_trace(go.Violin(x=df_tips['day'][ df_tips['smoker'] == 'No' ],\n                        y=df_tips['total_bill'][ df_tips['smoker'] == 'No' ],\n                        legendgroup='Yes', scalegroup='Yes', name='No',\n                        side='positive',\n                        line_color='red'))\n\n\n                                                \n\n\n\n\n\n\n# Create a heatmap using Seaborn data\nflights = sns.load_dataset(\"flights\")\nflights\n\n# You can set bins with nbinsx and nbinsy\nfig = px.density_heatmap(flights, x='year', y='month', z='passengers', \n                         color_continuous_scale=\"Viridis\")\nfig\n\n# You can add histograms\nfig = px.density_heatmap(flights, x='year', y='month', z='passengers', \n                         marginal_x=\"histogram\", marginal_y=\"histogram\")\nfig\n\n\n                                                \n\n\n\n\n\n\n# Create a 3D scatter plot using flight data\nfig = px.scatter_3d(flights, x='year', y='month', z='passengers', color='year',\n                   opacity=0.7, width=800, height=400)\nfig\n\n\n                                                \n\n\n\n\n\n\nfig = px.line_3d(flights, x='year', y='month', z='passengers', color='year')\nfig\n\n\n                                                \n\n\n\n\n\n\n# With a scatter matrix we can compare changes when comparing column data\nfig = px.scatter_matrix(flights, color='month')\nfig\n\n\n                                                \n\n\n\n\n\n\n# There are many interesting ways of working with maps\n# plotly.com/python-api-reference/generated/plotly.express.scatter_geo.html\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.scatter_geo(df, locations=\"iso_alpha\",\n                     color=\"continent\", # which column to use to set the color of markers\n                     hover_name=\"country\", # column added to hover information\n                     size=\"pop\", # size of markers\n                     projection=\"orthographic\")\nfig\n\n\n                                                \n\n\n\n\n\n\n# You can color complex maps like we do here representing unemployment data\n\n# Allows us to grab data from a supplied URL\nfrom urllib.request import urlopen\n# Used to decode JSON data\nimport json\n# Grab US county geometry data\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\n# Grab unemployment data based on each counties Federal Information Processing number\ndf = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv\",\n                   dtype={\"fips\": str})\n\n# Draw map using the county JSON data, color using unemployment values on a range of 12\nfig = px.choropleth(df, geojson=counties, locations='fips', color='unemp',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 12),\n                           scope=\"usa\",\n                           labels={'unemp':'unemployment rate'}\n                          )\nfig\n\n\n                                                \n\n\n\n\n\n\n# Polar charts display data radially \n# Let's plot wind data based on direction and frequency\n# You can change size and auto-generate different symbols as well\ndf_wind = px.data.wind()\npx.scatter_polar(df_wind, r=\"frequency\", theta=\"direction\", color=\"strength\",\n                size=\"frequency\", symbol=\"strength\")\n\n# Data can also be plotted using lines radially\n# A template makes the data easier to see\npx.line_polar(df_wind, r=\"frequency\", theta=\"direction\", color=\"strength\",\n                line_close=True, template=\"plotly_dark\", width=800, height=400)\n\n\n                                                \n\n\n\n\n\n\n# Used to represent ratios of 3 variables\ndf_exp = px.data.experiment()\npx.scatter_ternary(df_exp, a=\"experiment_1\", b=\"experiment_2\", \n                   c='experiment_3', hover_name=\"group\", color=\"gender\")\n\n\n                                                \n\n\n\n\n\n\n# You can create numerous subplots\ndf_tips = px.data.tips()\npx.scatter(df_tips, x=\"total_bill\", y=\"tip\", color=\"smoker\", facet_col=\"sex\")\n\n# We can line up data in rows and columns\npx.histogram(df_tips, x=\"total_bill\", y=\"tip\", color=\"sex\", facet_row=\"time\", facet_col=\"day\",\n       category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"], \"time\": [\"Lunch\", \"Dinner\"]})\n\n# This dataframe provides scores for different students based on the level\n# of attention they could provide during testing\natt_df = sns.load_dataset(\"attention\")\nfig = px.line(att_df, x='solutions', y='score', facet_col='subject',\n             facet_col_wrap=5, title='Scores Based on Attention')\nfig\n\n\n                                                \n\n\n\n\n\n\n# Create an animated plot that you can use to cycle through continent\n# GDP & life expectancy changes\ndf_cnt = px.data.gapminder()\npx.scatter(df_cnt, x=\"gdpPercap\", y=\"lifeExp\", animation_frame=\"year\", \n           animation_group=\"country\",\n           size=\"pop\", color=\"continent\", hover_name=\"country\",\n           log_x=True, size_max=55, range_x=[100,100000], range_y=[25,90])\n\n# Watch as bars chart population changes\npx.bar(df_cnt, x=\"continent\", y=\"pop\", color=\"continent\",\n  animation_frame=\"year\", animation_group=\"country\", range_y=[0,4000000000])"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Benjamin DK Luong",
    "section": "",
    "text": "Good companies with strong financial statements\n           \n            Read More\n          \n        \n      \n    \n    \n      \n        \n        \n          \n           Good real estate companies with stable profits\n           \n            Read More\n          \n        \n      \n    \n    \n      \n        \n        \n          \n          Good longterm stocks that are in oversold zone\n           \n            Read More"
  },
  {
    "objectID": "index.html#data-science",
    "href": "index.html#data-science",
    "title": "Benjamin DK Luong",
    "section": "Data Science",
    "text": "Data Science\n\n\n\n\n  \n\n\n\n\nPlotly Tutorial\n\n\n\n\n\n\n\nData Science\n\n\nVisualization\n\n\nPlotly\n\n\n \n\n\n\n\nOct 10, 2020\n\n\nBenjamin DK Luong\n\n\n\n\n\n\n  \n\n\n\n\nIs Only Accuracy Score Enough?\n\n\n\n\n\n\n\nData Science\n\n\n \n\n\n\n\nOct 10, 2019\n\n\nBenjamin DK Luong\n\n\n\n\n\n\n  \n\n\n\n\nBasic recipe for machine learning: High bias? High variance?\n\n\n\n\n\n\n\nData Science\n\n\n \n\n\n\n\nSep 15, 2019\n\n\nBenjamin DK Luong\n\n\n\n\n\n\n  \n\n\n\n\nHow to split a data set\n\n\n\n\n\n\n\nData Science\n\n\n \n\n\n\n\nAug 25, 2019\n\n\nBenjamin DK Luong\n\n\n\n\n\n\nNo matching items\n\n\n  \n\n\n See all"
  },
  {
    "objectID": "index.html#stock-market",
    "href": "index.html#stock-market",
    "title": "Benjamin DK Luong",
    "section": "Stock Market",
    "text": "Stock Market\n\n\n\n\n  \n\n\n\n\nReal Estate Investment\n\n\n\n\n\n\n\nStock Market\n\n\nReal Estate\n\n\nInvestment\n\n\n \n\n\n\n\nJan 11, 2023\n\n\nBenjamin DK Luong\n\n\n\n\n\n\n  \n\n\n\n\nLongterm Investment\n\n\n\n\n\n\n\nStock Market\n\n\nLongterm\n\n\nInvestment\n\n\n \n\n\n\n\nJan 10, 2023\n\n\nBenjamin DK Luong\n\n\n\n\n\n\n  \n\n\n\n\nDownload stock data\n\n\n\n\n\n\n\nStock Market\n\n\nDownload\n\n\n \n\n\n\n\nSep 9, 2019\n\n\nBenjamin DK Luong\n\n\n\n\n\n\nNo matching items\n\n\n See all"
  },
  {
    "objectID": "index.html#reinforcement-learning",
    "href": "index.html#reinforcement-learning",
    "title": "Benjamin DK Luong",
    "section": "Reinforcement Learning",
    "text": "Reinforcement Learning\n\n\n\n\n  \n\n\n\n\nComing soon\n\n\n\n\n\n\n\nReinforcement\n\n\n \n\n\n\n\nAug 11, 2019\n\n\nBenjamin DK Luong\n\n\n\n\n\n\nNo matching items\n\n\n See all"
  },
  {
    "objectID": "reinforcement_learning/index.html",
    "href": "reinforcement_learning/index.html",
    "title": "Reinforcement Learning",
    "section": "",
    "text": "Coming soon\n\n\n\n\n\n\n\nReinforcement\n\n\n\n\n\n\n\n\n\n\n\nAug 11, 2019\n\n\nBenjamin DK Luong\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "reinforcement_learning/posts/00_r.html",
    "href": "reinforcement_learning/posts/00_r.html",
    "title": "Coming soon",
    "section": "",
    "text": "Coming Soon"
  },
  {
    "objectID": "stock_market/index.html",
    "href": "stock_market/index.html",
    "title": "Stock Market",
    "section": "",
    "text": "Real Estate Investment\n\n\n\n\n\n\n\nStock Market\n\n\nReal Estate\n\n\nInvestment\n\n\n\n\n\n\n\n\n\n\n\nJan 11, 2023\n\n\nBenjamin DK Luong\n\n\n\n\n\n\n  \n\n\n\n\nLongterm Investment\n\n\n\n\n\n\n\nStock Market\n\n\nLongterm\n\n\nInvestment\n\n\n\n\n\n\n\n\n\n\n\nJan 10, 2023\n\n\nBenjamin DK Luong\n\n\n\n\n\n\n  \n\n\n\n\nDownload stock data\n\n\n\n\n\n\n\nStock Market\n\n\nDownload\n\n\n\n\n\n\n\n\n\n\n\nSep 9, 2019\n\n\nBenjamin DK Luong\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "stock_market/posts/00_Download_Stock_Data.html",
    "href": "stock_market/posts/00_Download_Stock_Data.html",
    "title": "Download stock data",
    "section": "",
    "text": "In this project, I would like to get my data from 2 sources:\n\nStock market dataset from Kaggle\nTD Ameritrade api (for intraday data)\n\nI will try to play with Kaggle data first because I want to set up initial pipeline for my project, and make this project going faster. Getting data from TD Ameritrade is more complicated, so I will try it later. I will follow the instruction here."
  },
  {
    "objectID": "stock_market/posts/01_Longterm_Investment.html",
    "href": "stock_market/posts/01_Longterm_Investment.html",
    "title": "Longterm Investment",
    "section": "",
    "text": "I filter stocks based on Return on Investment (ROI) which can tell use how effective a company use its money, and Net Profit which tell us if the company is making money or not. We want to invest into companies that are making money, right? All the companies listed here have over 40% Institutional ownership in them. It means Institutional Investors believe and invest into the companies for long-term growth. You also try to minimize Debt/Equity which tell you how much debt compares to equity. The bigger number means the company has more debt which is not good. However, a company sometimes has to borrow money to invest in its future.\nMoreover, you can look at dividend yield if you want to reduce the number of stocks you invest. Higher dividend yield means the companies want to share their profit to investors. You receive extra money from the companies. On the other hands, some companies want to keep their profit and invest back into the companies for long-term growth.\nWe are investing in companies for long-term, we should know companies vision.\n\n\n\n\n\n\n\n  \n    \n      \n      Ticker\n      Sector\n      Market Cap\n      Dividend\n      ROA\n      ROE\n      ROI\n      Curr R\n      Quick R\n      Debt/Eq\n      Gross M\n      Oper M\n      Profit M\n    \n  \n  \n    \n      0\n      CF\n      Basic Materials\n      16.81B\n      1.85%\n      24.10%\n      78.60%\n      21.10%\n      2.70\n      2.30\n      0.00\n      51.80%\n      47.70%\n      28.70%\n    \n    \n      1\n      MOS\n      Basic Materials\n      15.30B\n      1.70%\n      16.00%\n      32.70%\n      12.60%\n      1.30\n      0.60\n      0.36\n      32.10%\n      27.30%\n      20.10%\n    \n    \n      2\n      META\n      Communication Services\n      349.99B\n      -\n      17.00%\n      23.20%\n      31.00%\n      2.60\n      2.60\n      0.08\n      80.30%\n      29.70%\n      24.40%\n    \n    \n      3\n      GOOGL\n      Communication Services\n      1167.72B\n      -\n      18.70%\n      26.40%\n      24.00%\n      2.50\n      2.50\n      0.06\n      56.10%\n      27.80%\n      23.70%\n    \n    \n      4\n      ATVI\n      Communication Services\n      59.70B\n      0.61%\n      6.70%\n      9.20%\n      13.20%\n      5.80\n      5.80\n      0.19\n      71.10%\n      27.00%\n      22.80%\n    \n    \n      5\n      KO\n      Consumer Defensive\n      259.69B\n      2.88%\n      10.60%\n      42.40%\n      12.60%\n      1.10\n      1.00\n      1.74\n      58.50%\n      26.00%\n      23.40%\n    \n    \n      6\n      BF-B\n      Consumer Defensive\n      31.10B\n      1.25%\n      13.60%\n      31.90%\n      18.50%\n      3.40\n      1.80\n      0.79\n      60.10%\n      30.20%\n      21.40%\n    \n    \n      7\n      FANG\n      Energy\n      24.82B\n      2.06%\n      17.60%\n      31.70%\n      17.50%\n      0.60\n      0.60\n      0.39\n      84.20%\n      70.60%\n      42.80%\n    \n    \n      8\n      DVN\n      Energy\n      41.13B\n      8.07%\n      27.90%\n      63.30%\n      19.70%\n      1.20\n      1.20\n      0.62\n      55.60%\n      42.30%\n      32.70%\n    \n    \n      9\n      EOG\n      Energy\n      74.77B\n      2.53%\n      19.30%\n      33.20%\n      17.70%\n      1.80\n      1.60\n      0.21\n      63.60%\n      38.60%\n      29.90%\n    \n    \n      10\n      PXD\n      Energy\n      55.29B\n      10.90%\n      19.40%\n      30.50%\n      18.20%\n      1.00\n      0.90\n      0.23\n      54.80%\n      42.30%\n      28.70%\n    \n    \n      11\n      COP\n      Energy\n      147.88B\n      4.32%\n      19.40%\n      37.30%\n      10.80%\n      1.50\n      1.40\n      0.35\n      48.90%\n      34.20%\n      24.10%\n    \n    \n      12\n      V\n      Financial\n      446.98B\n      0.80%\n      17.50%\n      44.30%\n      28.10%\n      1.40\n      1.40\n      0.68\n      80.50%\n      64.20%\n      49.90%\n    \n    \n      13\n      MA\n      Financial\n      349.38B\n      0.60%\n      26.30%\n      145.60%\n      39.90%\n      1.20\n      1.20\n      2.28\n      -\n      55.00%\n      45.20%\n    \n    \n      14\n      CMA\n      Financial\n      8.82B\n      3.95%\n      1.10%\n      16.10%\n      18.50%\n      -\n      -\n      0.65\n      -\n      96.20%\n      44.10%\n    \n    \n      15\n      KEY\n      Financial\n      16.62B\n      4.47%\n      1.10%\n      15.70%\n      14.00%\n      -\n      -\n      1.69\n      -\n      85.00%\n      42.40%\n    \n    \n      16\n      SBNY\n      Financial\n      7.02B\n      1.91%\n      1.10%\n      16.00%\n      17.80%\n      -\n      -\n      0.07\n      -\n      79.70%\n      42.40%\n    \n    \n      17\n      PNC\n      Financial\n      66.08B\n      3.55%\n      1.00%\n      11.10%\n      11.80%\n      -\n      -\n      0.53\n      -\n      93.60%\n      41.50%\n    \n    \n      18\n      RF\n      Financial\n      20.22B\n      3.58%\n      1.20%\n      12.60%\n      19.60%\n      -\n      -\n      0.17\n      -\n      89.80%\n      41.30%\n    \n    \n      19\n      USB\n      Financial\n      71.82B\n      4.03%\n      1.10%\n      14.20%\n      14.40%\n      -\n      -\n      0.79\n      -\n      83.40%\n      40.60%\n    \n    \n      20\n      TFC\n      Financial\n      60.66B\n      4.41%\n      1.10%\n      10.10%\n      12.60%\n      -\n      -\n      0.58\n      -\n      90.30%\n      39.40%\n    \n    \n      21\n      FITB\n      Financial\n      23.02B\n      3.78%\n      1.10%\n      13.00%\n      15.00%\n      -\n      -\n      0.80\n      -\n      84.20%\n      38.90%\n    \n    \n      22\n      DFS\n      Financial\n      28.00B\n      2.26%\n      3.80%\n      34.30%\n      23.60%\n      -\n      -\n      1.53\n      -\n      73.80%\n      36.90%\n    \n    \n      23\n      HBAN\n      Financial\n      20.64B\n      4.23%\n      1.10%\n      11.80%\n      15.70%\n      -\n      -\n      0.50\n      -\n      90.80%\n      35.60%\n    \n    \n      24\n      MKTX\n      Financial\n      11.57B\n      0.87%\n      15.30%\n      23.80%\n      25.10%\n      -\n      -\n      0.00\n      92.90%\n      45.60%\n      34.50%\n    \n    \n      25\n      SPGI\n      Financial\n      115.77B\n      0.92%\n      6.70%\n      11.80%\n      54.00%\n      0.80\n      0.80\n      0.29\n      67.60%\n      49.50%\n      33.80%\n    \n    \n      26\n      ZION\n      Financial\n      7.41B\n      3.19%\n      0.90%\n      14.40%\n      27.00%\n      -\n      -\n      0.15\n      -\n      92.30%\n      33.00%\n    \n    \n      27\n      SIVB\n      Financial\n      14.20B\n      -\n      0.70%\n      13.10%\n      15.90%\n      -\n      -\n      0.28\n      -\n      83.00%\n      32.80%\n    \n    \n      28\n      WFC\n      Financial\n      161.75B\n      2.80%\n      0.80%\n      9.30%\n      10.50%\n      -\n      -\n      1.00\n      -\n      87.70%\n      32.30%\n    \n    \n      29\n      CFG\n      Financial\n      20.02B\n      4.02%\n      0.90%\n      8.70%\n      15.00%\n      -\n      -\n      0.33\n      -\n      85.30%\n      30.60%\n    \n    \n      30\n      BLK\n      Financial\n      107.60B\n      2.59%\n      4.10%\n      14.90%\n      12.10%\n      -\n      -\n      0.00\n      81.00%\n      37.50%\n      29.80%\n    \n    \n      31\n      FRC\n      Financial\n      22.21B\n      0.85%\n      0.80%\n      12.00%\n      26.40%\n      -\n      -\n      0.09\n      -\n      90.10%\n      29.50%\n    \n    \n      32\n      MTB\n      Financial\n      25.15B\n      3.21%\n      0.80%\n      7.50%\n      16.40%\n      -\n      -\n      0.15\n      -\n      86.90%\n      29.10%\n    \n    \n      33\n      TROW\n      Financial\n      25.75B\n      4.01%\n      16.30%\n      22.10%\n      31.20%\n      -\n      -\n      0.00\n      -\n      43.20%\n      28.60%\n    \n    \n      34\n      COF\n      Financial\n      37.33B\n      2.38%\n      1.90%\n      16.20%\n      22.90%\n      -\n      -\n      1.01\n      -\n      78.00%\n      28.30%\n    \n    \n      35\n      MCO\n      Financial\n      54.66B\n      0.90%\n      10.80%\n      64.30%\n      22.70%\n      1.80\n      1.80\n      0.00\n      70.50%\n      36.60%\n      27.20%\n    \n    \n      36\n      AFL\n      Financial\n      43.23B\n      2.34%\n      3.60%\n      17.80%\n      11.10%\n      -\n      -\n      0.31\n      -\n      26.50%\n      24.20%\n    \n    \n      37\n      AIG\n      Financial\n      46.55B\n      2.01%\n      2.50%\n      26.90%\n      11.70%\n      -\n      -\n      1.44\n      -\n      34.20%\n      23.30%\n    \n    \n      38\n      FDS\n      Financial\n      15.34B\n      0.86%\n      11.80%\n      32.20%\n      12.90%\n      2.20\n      2.20\n      1.26\n      53.70%\n      27.30%\n      22.10%\n    \n    \n      39\n      MRNA\n      Healthcare\n      69.51B\n      -\n      45.10%\n      70.00%\n      81.90%\n      2.10\n      1.80\n      0.06\n      79.20%\n      61.90%\n      55.00%\n    \n    \n      40\n      REGN\n      Healthcare\n      76.40B\n      -\n      20.10%\n      26.60%\n      35.80%\n      5.40\n      4.50\n      0.13\n      85.40%\n      45.50%\n      39.20%\n    \n    \n      41\n      VRTX\n      Healthcare\n      75.44B\n      -\n      21.80%\n      28.50%\n      22.50%\n      4.70\n      4.60\n      0.03\n      88.00%\n      47.70%\n      37.60%\n    \n    \n      42\n      PFE\n      Healthcare\n      261.18B\n      3.44%\n      15.80%\n      35.10%\n      18.90%\n      1.60\n      1.40\n      0.40\n      65.50%\n      36.10%\n      29.90%\n    \n    \n      43\n      BIIB\n      Healthcare\n      40.35B\n      -\n      11.80%\n      24.50%\n      15.30%\n      2.50\n      2.10\n      0.49\n      77.20%\n      23.70%\n      27.60%\n    \n    \n      44\n      EW\n      Healthcare\n      46.93B\n      -\n      17.20%\n      24.50%\n      23.20%\n      3.80\n      3.00\n      0.10\n      78.90%\n      31.20%\n      27.20%\n    \n    \n      45\n      INCY\n      Healthcare\n      17.74B\n      -\n      16.80%\n      22.00%\n      25.30%\n      3.80\n      3.80\n      0.01\n      94.90%\n      18.60%\n      26.30%\n    \n    \n      46\n      TECH\n      Healthcare\n      12.86B\n      0.39%\n      12.60%\n      17.00%\n      13.20%\n      4.00\n      2.90\n      0.15\n      68.50%\n      30.30%\n      26.10%\n    \n    \n      47\n      AMGN\n      Healthcare\n      140.18B\n      3.14%\n      11.20%\n      199.70%\n      17.10%\n      1.70\n      1.30\n      10.60\n      75.80%\n      36.90%\n      26.00%\n    \n    \n      48\n      MRK\n      Healthcare\n      280.42B\n      2.61%\n      14.30%\n      36.60%\n      15.50%\n      1.50\n      1.20\n      0.68\n      70.90%\n      30.70%\n      25.90%\n    \n    \n      49\n      ZTS\n      Healthcare\n      73.42B\n      0.94%\n      15.00%\n      44.80%\n      18.30%\n      2.30\n      1.50\n      1.41\n      70.20%\n      32.10%\n      25.80%\n    \n    \n      50\n      WAT\n      Healthcare\n      21.48B\n      -\n      22.80%\n      183.40%\n      37.60%\n      2.20\n      1.50\n      4.01\n      57.60%\n      28.80%\n      23.60%\n    \n    \n      51\n      ABBV\n      Healthcare\n      264.25B\n      3.89%\n      9.30%\n      85.60%\n      17.90%\n      0.90\n      0.80\n      4.35\n      71.20%\n      30.60%\n      23.10%\n    \n    \n      52\n      ISRG\n      Healthcare\n      90.20B\n      -\n      10.20%\n      11.60%\n      13.90%\n      5.10\n      4.40\n      0.00\n      67.80%\n      27.10%\n      22.50%\n    \n    \n      53\n      RMD\n      Healthcare\n      30.77B\n      0.82%\n      15.80%\n      23.80%\n      19.80%\n      2.90\n      1.70\n      0.23\n      56.80%\n      28.00%\n      21.70%\n    \n    \n      54\n      WST\n      Healthcare\n      18.46B\n      0.31%\n      19.00%\n      26.40%\n      24.80%\n      3.80\n      2.90\n      0.08\n      40.40%\n      25.30%\n      21.70%\n    \n    \n      55\n      GEN\n      Healthcare\n      14.34B\n      2.28%\n      6.60%\n      195.70%\n      21.90%\n      0.60\n      0.60\n      5.92\n      85.10%\n      32.20%\n      20.60%\n    \n    \n      56\n      LLY\n      Healthcare\n      337.45B\n      1.26%\n      12.70%\n      65.40%\n      20.80%\n      1.10\n      0.90\n      1.58\n      75.60%\n      24.70%\n      20.60%\n    \n    \n      57\n      IDXX\n      Healthcare\n      36.42B\n      -\n      26.10%\n      118.40%\n      48.00%\n      0.90\n      0.60\n      2.93\n      59.20%\n      26.10%\n      20.10%\n    \n    \n      58\n      VRSK\n      Industrials\n      27.79B\n      0.68%\n      13.60%\n      42.20%\n      12.90%\n      0.50\n      0.50\n      1.72\n      65.80%\n      45.60%\n      34.10%\n    \n    \n      59\n      PAYX\n      Industrials\n      42.06B\n      2.64%\n      15.30%\n      46.10%\n      36.20%\n      1.30\n      1.30\n      0.25\n      -\n      40.00%\n      30.40%\n    \n    \n      60\n      CPRT\n      Industrials\n      28.92B\n      -\n      20.00%\n      24.00%\n      23.90%\n      4.70\n      4.60\n      0.00\n      44.40%\n      37.40%\n      30.00%\n    \n    \n      61\n      UNP\n      Industrials\n      126.43B\n      2.42%\n      11.00%\n      56.00%\n      16.80%\n      0.80\n      0.60\n      2.85\n      77.40%\n      40.70%\n      28.90%\n    \n    \n      62\n      CSX\n      Industrials\n      65.57B\n      1.23%\n      10.00%\n      31.00%\n      14.80%\n      1.70\n      1.60\n      1.40\n      71.60%\n      40.80%\n      28.10%\n    \n    \n      63\n      NSC\n      Industrials\n      56.93B\n      1.95%\n      8.30%\n      24.30%\n      13.00%\n      1.00\n      0.90\n      1.16\n      51.20%\n      38.50%\n      26.20%\n    \n    \n      64\n      ODFL\n      Industrials\n      32.40B\n      0.38%\n      27.80%\n      37.30%\n      27.50%\n      1.70\n      1.70\n      0.03\n      87.00%\n      28.90%\n      21.60%\n    \n    \n      65\n      EXR\n      Real Estate\n      20.21B\n      3.89%\n      8.40%\n      28.90%\n      10.50%\n      -\n      -\n      2.15\n      75.60%\n      59.20%\n      50.10%\n    \n    \n      66\n      WY\n      Real Estate\n      22.67B\n      2.24%\n      13.10%\n      21.40%\n      18.50%\n      2.90\n      2.40\n      0.47\n      37.20%\n      30.10%\n      21.60%\n    \n    \n      67\n      TXN\n      Technology\n      154.07B\n      2.78%\n      35.30%\n      63.50%\n      37.10%\n      4.90\n      4.10\n      0.55\n      69.50%\n      51.80%\n      44.00%\n    \n    \n      68\n      MSFT\n      Technology\n      1757.26B\n      1.14%\n      19.80%\n      42.10%\n      31.30%\n      1.80\n      1.80\n      0.36\n      68.30%\n      41.60%\n      34.40%\n    \n    \n      69\n      AVGO\n      Technology\n      229.38B\n      3.16%\n      15.50%\n      51.30%\n      21.40%\n      2.60\n      2.40\n      1.74\n      66.60%\n      42.80%\n      33.80%\n    \n    \n      70\n      KLAC\n      Technology\n      55.79B\n      1.24%\n      26.50%\n      112.80%\n      43.30%\n      2.40\n      1.70\n      0.00\n      63.00%\n      39.90%\n      33.30%\n    \n    \n      71\n      ANET\n      Technology\n      34.86B\n      -\n      19.60%\n      28.20%\n      21.00%\n      4.00\n      3.00\n      0.00\n      61.80%\n      33.70%\n      29.60%\n    \n    \n      72\n      QCOM\n      Technology\n      129.28B\n      2.47%\n      28.30%\n      88.10%\n      41.20%\n      1.70\n      1.20\n      0.86\n      57.80%\n      35.80%\n      29.30%\n    \n    \n      73\n      FLT\n      Technology\n      13.81B\n      -\n      6.70%\n      35.70%\n      10.80%\n      1.00\n      1.00\n      3.24\n      -\n      41.90%\n      28.50%\n    \n    \n      74\n      ADBE\n      Technology\n      158.10B\n      -\n      18.40%\n      34.40%\n      26.00%\n      1.10\n      1.10\n      0.29\n      87.70%\n      34.40%\n      27.80%\n    \n    \n      75\n      LRCX\n      Technology\n      60.04B\n      1.47%\n      28.00%\n      74.10%\n      42.50%\n      2.70\n      1.80\n      0.67\n      45.70%\n      31.70%\n      27.00%\n    \n    \n      76\n      AAPL\n      Technology\n      2046.99B\n      0.69%\n      28.10%\n      160.90%\n      58.30%\n      0.90\n      0.80\n      2.37\n      43.30%\n      30.30%\n      25.30%\n    \n    \n      77\n      AMAT\n      Technology\n      87.36B\n      0.94%\n      25.20%\n      54.70%\n      38.00%\n      2.20\n      1.40\n      0.45\n      46.50%\n      30.20%\n      25.30%\n    \n    \n      78\n      MCHP\n      Technology\n      39.30B\n      1.74%\n      11.40%\n      31.00%\n      11.30%\n      1.10\n      0.60\n      1.20\n      66.50%\n      32.50%\n      24.10%\n    \n    \n      79\n      MPWR\n      Technology\n      17.72B\n      0.75%\n      22.30%\n      28.30%\n      18.70%\n      4.50\n      3.20\n      0.00\n      58.30%\n      28.00%\n      23.40%\n    \n    \n      80\n      SWKS\n      Technology\n      15.70B\n      2.45%\n      14.70%\n      24.00%\n      17.30%\n      2.60\n      1.60\n      0.40\n      47.50%\n      27.80%\n      23.20%\n    \n    \n      81\n      CDNS\n      Technology\n      45.28B\n      -\n      17.30%\n      29.00%\n      22.90%\n      1.30\n      1.20\n      0.29\n      89.90%\n      30.80%\n      22.90%\n    \n    \n      82\n      MU\n      Technology\n      60.22B\n      0.80%\n      9.40%\n      12.60%\n      15.40%\n      3.50\n      2.20\n      0.21\n      41.30%\n      25.30%\n      22.80%\n    \n    \n      83\n      NTAP\n      Technology\n      13.30B\n      3.12%\n      15.20%\n      164.90%\n      28.80%\n      1.40\n      1.30\n      1.99\n      65.60%\n      17.60%\n      22.50%\n    \n    \n      84\n      CSCO\n      Technology\n      195.30B\n      3.10%\n      12.30%\n      28.80%\n      22.90%\n      1.50\n      1.30\n      0.22\n      62.20%\n      26.90%\n      22.00%\n    \n    \n      85\n      NVDA\n      Technology\n      389.93B\n      0.10%\n      13.70%\n      24.30%\n      26.20%\n      3.40\n      2.70\n      0.51\n      57.80%\n      20.80%\n      20.90%\n    \n    \n      86\n      KEYS\n      Technology\n      30.62B\n      -\n      14.30%\n      28.70%\n      19.70%\n      3.00\n      2.40\n      0.43\n      63.70%\n      24.60%\n      20.70%"
  },
  {
    "objectID": "stock_market/posts/02_Real_Estate.html",
    "href": "stock_market/posts/02_Real_Estate.html",
    "title": "Real Estate Investment",
    "section": "",
    "text": "If you want to invest into real estate and dont have enough cash to buy a whole property, you can invest in Real Estate stocks. Here are a list of real estate stocks with good net profits. You should watch out for stocks with high Debt/Equity which means the companies have a lot of debt compare to their equities.\n\n\n\n\n\n\n\n  \n    \n      \n      Ticker\n      Sector\n      Market Cap\n      Dividend\n      ROA\n      ROE\n      ROI\n      Curr R\n      Quick R\n      Debt/Eq\n      Gross M\n      Oper M\n      Profit M\n    \n  \n  \n    \n      0\n      PLD\n      Real Estate\n      103.63B\n      2.72%\n      6.70%\n      11.70%\n      2.50%\n      -\n      -\n      0.51\n      74.70%\n      38.80%\n      73.10%\n    \n    \n      1\n      CPT\n      Real Estate\n      11.62B\n      3.32%\n      7.80%\n      14.80%\n      1.70%\n      -\n      -\n      0.73\n      62.60%\n      46.00%\n      50.80%\n    \n    \n      2\n      EXR\n      Real Estate\n      19.21B\n      4.10%\n      8.40%\n      28.90%\n      10.50%\n      -\n      -\n      2.15\n      75.60%\n      59.20%\n      50.10%\n    \n    \n      3\n      AVB\n      Real Estate\n      22.02B\n      3.90%\n      5.80%\n      10.50%\n      1.90%\n      -\n      -\n      0.72\n      64.30%\n      20.00%\n      45.80%\n    \n    \n      4\n      EQR\n      Real Estate\n      21.50B\n      4.26%\n      5.50%\n      10.50%\n      8.60%\n      -\n      -\n      0.68\n      63.20%\n      56.50%\n      42.60%\n    \n    \n      5\n      SPG\n      Real Estate\n      39.58B\n      6.16%\n      5.90%\n      62.70%\n      8.20%\n      -\n      -\n      8.27\n      80.70%\n      47.30%\n      37.70%\n    \n    \n      6\n      VICI\n      Real Estate\n      31.96B\n      4.82%\n      2.80%\n      4.50%\n      8.30%\n      -\n      -\n      0.67\n      99.00%\n      54.50%\n      35.90%\n    \n    \n      7\n      MAA\n      Real Estate\n      17.27B\n      3.62%\n      5.50%\n      10.40%\n      4.20%\n      -\n      -\n      0.75\n      60.50%\n      31.40%\n      32.00%\n    \n    \n      8\n      DLR\n      Real Estate\n      28.46B\n      4.77%\n      3.80%\n      8.40%\n      2.00%\n      -\n      -\n      0.96\n      60.60%\n      12.00%\n      30.70%\n    \n    \n      9\n      FRT\n      Real Estate\n      8.15B\n      4.24%\n      4.00%\n      12.20%\n      6.00%\n      -\n      -\n      1.59\n      66.80%\n      43.60%\n      29.80%\n    \n    \n      10\n      BXP\n      Real Estate\n      10.11B\n      5.82%\n      3.80%\n      14.60%\n      4.90%\n      -\n      -\n      2.29\n      63.20%\n      34.50%\n      28.50%\n    \n    \n      11\n      PEAK\n      Real Estate\n      13.65B\n      4.59%\n      3.60%\n      8.70%\n      0.70%\n      -\n      -\n      1.02\n      58.40%\n      18.50%\n      27.80%\n    \n    \n      12\n      AMT\n      Real Estate\n      100.33B\n      2.81%\n      4.20%\n      49.00%\n      5.90%\n      0.60\n      0.60\n      6.10\n      69.40%\n      26.50%\n      27.80%\n    \n    \n      13\n      CCI\n      Real Estate\n      61.53B\n      4.26%\n      4.10%\n      20.30%\n      6.40%\n      0.50\n      0.50\n      2.80\n      69.90%\n      33.60%\n      23.50%\n    \n    \n      14\n      WY\n      Real Estate\n      21.77B\n      2.33%\n      13.10%\n      21.40%\n      18.50%\n      2.90\n      2.40\n      0.47\n      37.20%\n      30.10%\n      21.60%\n    \n    \n      15\n      O\n      Real Estate\n      39.79B\n      4.65%\n      1.50%\n      2.50%\n      0.70%\n      -\n      -\n      0.61\n      93.60%\n      18.70%\n      20.60%"
  }
]